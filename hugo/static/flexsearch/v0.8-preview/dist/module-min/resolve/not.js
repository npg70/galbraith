import Resolver from"../resolver.js";import default_resolver from"./default.js";import{create_object}from"../common.js";Resolver.prototype.not=function(){const a=this;let b=arguments,c=b[0];if(c.then)return c.then(function(){return a.not.apply(a,b)});if(c[0]&&c[0].index)return this.not.apply(this,c);let d,e,f=[],g=[],h=0,i=0;for(let a,c=0;c<b.length;c++)if(a=b[c]){let b;if(a.constructor===Resolver)b=a.result;else if(a.constructor===Array)b=a;else if(a.index)a.resolve=!1,b=a.index.search(a).result;else if(a.or)b=this.or(a.or);else if(a.and)b=this.and(a.and);else if(a.xor)b=this.xor(a.xor);else{h=a.limit||0,i=a.offset||0,d=a.enrich,e=a.resolve;continue}f[c]=b,b.then&&g.push(b)}return g.length?Promise.all(g).then(function(){return a.result=exclusion.call(a,f,h,i,e),e?a.result:a}):(this.result=exclusion.call(this,f,h,i,e),e?this.result:this)};function exclusion(a,b,c,d){if(!a.length)return this.result;const e=[],f=new Set(a.flat().flat());for(let g,h=0;h<this.result.length;h++)if(g=this.result[h],g)for(let a,b=0;b<g.length;b++)a=g[b],f.has(a)||(d?e.push(a):(e[h]||(e[h]=[]),e[h].push(a)));return e}