import{DocumentSearchOptions}from"../type.js";import{create_object,is_array,is_object,is_string}from"../common.js";import{intersect_union}from"../intersect.js";import Document from"../document.js";let debug=!1;Document.prototype.search=function(a,b,c,d){debug,c||(!b&&is_object(a)?(c=a,a=""):is_object(b)&&(c=b,b=0));let e,f,g,h,j,k,l,m=[],n=[],o=0;if(c){if(is_array(c)&&(c={index:c}),a=c.query||a,e=c.pluck,g=c.merge,j=e||c.field||c.index,k=this.tag&&c.tag,f=this.store&&c.enrich,h=c.suggest,b=c.limit||b,l=c.offset||0,b||(b=100),k&&(!this.db||!d)){debug,k.constructor!==Array&&(k=[k]);let c=[];for(let a,b=0;b<k.length;b++)if(a=k[b],a.field&&a.tag){const b=a.tag;if(b.constructor===Array)for(let d=0;d<b.length;d++)c.push(a.field,b[d]);else c.push(a.field,b)}else{const b=Object.keys(a);for(let d,e,f=0;f<b.length;f++)if(d=b[f],e=a[d],e.constructor===Array)for(let a=0;a<e.length;a++)c.push(d,e[a]);else c.push(d,e)}if(k=c,!a){let a=[];if(c.length)for(let d=0;d<c.length;d+=2){let e;if(this.db){const g=this.index.get(c[d]);if(!g){continue}debug,a.push(e=g.db.tag(c[d+1],b,l,f))}else debug,e=get_tag.call(this,c[d],c[d+1],b,l,f);m.push({field:c[d],tag:c[d+1],result:e})}return a.length?Promise.all(a).then(function(a){for(let b=0;b<a.length;b++)m[b].result=a[b];return m}):m}}is_string(j)&&(j=[j])}j||(j=this.field);let p,q=!d&&(this.worker||this.async)&&[];for(let e,g,l,r=0;r<j.length;r++){if(g=j[r],this.db&&this.tag&&!this.tree[r])continue;let i;if(is_string(g)||(i=g,g=i.field,a=i.query||a,b=i.limit||b,h=i.suggest||h),d)e=d[r];else{let d=i||c,h=this.index.get(g);if(k&&(this.db&&(d.tag=k,p=h.db.support_tag_search,d.field=j),!p&&(d.enrich=!1)),q){q[r]=h.searchAsync(a,b,d),d&&f&&(d.enrich=f);continue}else e=h.search(a,b,d),d&&f&&(d.enrich=f)}if(l=e&&e.length,k&&l){const a=[];let b=0;if(!(this.db&&d))for(let c,d,e=0;e<k.length;e+=2){if(debug,c=this.tag.get(k[e]),!c)if(!1,h)continue;else return m;if(c=c&&c.get(k[e+1]),d=c&&c.length,d)b++,a.push(c);else if(!h)return m}else if(!p)for(let c=j.length;c<d.length;c++){let e=d[c],f=e&&e.length;if(f)b++,a.push(e);else if(!h)return m}if(b){if(debug,e=intersect_union(e,a),l=e.length,!l&&!h)return m;b--}}if(l)n[o]=g,m.push(e),o++;else if(1===j.length)return m}if(q){if(this.db&&k&&k.length&&!p)for(let a=0;a<k.length;a+=2){const c=this.index.get(k[a]);if(!c)if(!1,h)continue;else return m;debug,q.push(c.db.tag(k[a+1],b,l,!1))}const d=this;return Promise.all(q).then(function(e){return e.length?d.search(a,b,c,e):e})}if(!o)return m;if(e&&(!f||!this.store))return m[0];q=[];for(let g,h=0;h<n.length;h++){if(g=m[h],f&&g.length&&!g[0].doc&&(this.db?(debug,q.push(g=this.index.get(this.field[0]).db.enrich(g))):g.length&&(g=apply_enrich.call(this,g))),e)return g;m[h]={field:n[h],result:g}}return f&&!0&&this.db&&q.length?Promise.all(q).then(function(a){for(let b=0;b<a.length;b++)m[b].result=a[b];return g?merge_fields(m,b,l):m}):g?merge_fields(m,b,l):m};function merge_fields(a,b){const c=[],d=create_object();for(let e,f,g=0;g<a.length;g++){e=a[g],f=e.result;for(let a,g,h,i=0;i<f.length;i++)if(g=f[i],a=g.id,h=d[a],!h){if(c.length===b)return c;g.field=d[a]=[e.field],c.push(g)}else h.push(e.field)}return c}function get_tag(a,b,c,d){let e=this.tag.get(a);if(!e)return!1,[];e=e&&e.get(b);e&&e.length-d}function apply_enrich(a){const b=Array(a.length);for(let c,d=0;d<a.length;d++)c=a[d],b[d]={id:c,doc:this.store.get(c)};return b}